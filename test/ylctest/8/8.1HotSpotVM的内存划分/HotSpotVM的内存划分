下面详细介绍栈空间、堆空间和直接内存。

1. 栈空间

栈空间是线程私有的，主要包含三部分：程序计数器、Java虚拟机栈和本地方法栈。

（1）程序计数器

程序计数器是线程私有的一块内存区域，各线程之间的程序计数器不会相互影响。
程序计数器对于HotSpot VM的解释执行非常重要。
解释器通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。

在Linux内核的64位系统上，HotSpot VM约定%r13寄存器保存指向当前要执行的字节码指令的地址，
如果要执行调用，那么下一条字节码指令的地址可能会保存在解释栈的栈中，也可能会保存在线程的私有变量中。
程序计数器的生命周期随着线程的创建而创建，随着线程的结束而死亡。

2）Java虚拟机栈

对于HotSpot VM来说，Java栈寄生在本地C/C++栈中，因此在一个C/C++栈中可能既有C/C++栈，又有Java栈。
Java栈可以分为解释栈和编译栈，而栈是由一个个栈帧组成的，每个栈帧中都拥有局部变量表和操作数栈等信息。

Java栈中保存的主要内容是栈帧，每次函数调用都会有一个对应的栈帧被压入Java栈，每次函数调用结束后都会有一个栈帧被弹出。
Java方法有return字节码和抛出异常两种返回方式，不管哪种返回方式都会导致栈帧被弹出。

与程序计数器一样，Java虚拟机栈也是线程私有的，而且随着线程的创建而创建，随着线程的结束而死亡。

（3）本地方法栈

本地方法栈其实就是C/C++栈，某个线程在执行过程中可能会调用Java的native方法，也可能会调用HotSpot VM本身用C/C++语言编写的函数，
不过这二者并没有本质区别，因为native方法最终还是由C/C++语言实现的。

本地方法栈同样随着线程的创建而创建，随着线程的结束而死亡。

2. 堆空间

Java堆是所有线程共享的一块内存区域，该区域会存放几乎所有的对象及数组，由于对象或数组会不断地创建和死亡，所以这是Java垃圾收集器收集的主要区域。

Java将堆空间划分为年轻代堆空间和老年代堆空间，这样就可以使用分代垃圾收集算法。
后面的章节中会介绍最基础的单线程收集器Serial和Serial Old，其中Serial采用复制算法回收年轻代堆空间，而Serial Old采用压缩-整理算法回收老年代堆空间。

我们可以进一步细分年轻代堆空间，将其划分为Eden区、From Survivor区和To Survivor区。
采用复制算法时，通常需要保存To Survivor区为空，这样Serial收集器会将Eden区和From Survivor区的活跃对象复制到To Survivor区，
然后回收Eden区和From Survivor区中未被标记的死亡对象。

前面讲过对象的创建需要先分配内存。首先会在TLAB中分配，其实TLAB就是Eden区中的一块内存，只不过这块内存被划分给了特定的线程而已。
如果TLAB区分配失败，通常会在Eden区中的非TLAB空间内再次分配，因此对象通常优先在Eden区中分配内存。

3. 直接内存

直接内存并不是Java虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。
在OpenJDK 8中，元空间使用的就是直接内存。
与之前OpenJDK版本使用永久代很大的不同是，如果不指定内存大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。

另外，JDK 1.4中新加入的NIO类引入了一种基于通道（Channel）与缓存区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，
然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。
这样就能在一些场景中显著提高性能，因为这避免了在Java堆和Native堆之间来回复制数据。

本机直接内存的分配不会受到Java堆的限制，但既然是内存，就会受到本机总内存及处理器寻址空间的限制。